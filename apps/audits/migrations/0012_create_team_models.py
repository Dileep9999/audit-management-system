# Generated by Django 5.2.1 on 2025-06-30 16:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("audits", "0011_sync_assignments"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="audittask",
            name="assigned_to",
            field=models.ForeignKey(
                blank=True,
                help_text="Legacy single user assignment - use assigned_users for multiple assignments",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="assigned_audit_tasks",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Assigned To",
            ),
        ),
        migrations.AlterField(
            model_name="audittask",
            name="assigned_users",
            field=models.ManyToManyField(
                blank=True,
                help_text="Multiple users can be assigned to work on this task",
                related_name="assigned_audit_tasks_multi",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Assigned Users",
            ),
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the team",
                        max_length=255,
                        verbose_name="Team Name",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("audit", "Audit Team"),
                            ("review", "Review Team"),
                            ("management", "Management Team"),
                            ("technical", "Technical Team"),
                            ("compliance", "Compliance Team"),
                        ],
                        default="audit",
                        help_text="Type of team based on its function",
                        max_length=20,
                        verbose_name="Team Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the team purpose and responsibilities",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this team is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "audits",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Audits this team is assigned to work on",
                        related_name="assigned_teams",
                        to="audits.audit",
                        verbose_name="Assigned Audits",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_teams",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="deleted_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="User who owns and manages this team",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_teams",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Team Owner",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team",
                "verbose_name_plural": "Teams",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TeamMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("lead", "Team Lead"),
                            ("manager", "Manager"),
                            ("admin", "Admin"),
                        ],
                        default="member",
                        help_text="Role of the user in this team",
                        max_length=20,
                        verbose_name="Role",
                    ),
                ),
                (
                    "can_assign_tasks",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this member can assign tasks to other team members",
                        verbose_name="Can Assign Tasks",
                    ),
                ),
                (
                    "can_review",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this member can review work from other team members",
                        verbose_name="Can Review",
                    ),
                ),
                (
                    "can_manage_team",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this member can add/remove other team members",
                        verbose_name="Can Manage Team",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Joined At"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this team membership is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes about this team membership",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        help_text="User who added this member to the team",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="added_team_members",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_memberships",
                        to="audits.team",
                        verbose_name="Team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_team_memberships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Member",
                "verbose_name_plural": "Team Members",
                "ordering": ["-joined_at"],
            },
        ),
        migrations.AddField(
            model_name="team",
            name="members",
            field=models.ManyToManyField(
                help_text="Users who are members of this team",
                related_name="team_memberships",
                through="audits.TeamMember",
                through_fields=("team", "user"),
                to=settings.AUTH_USER_MODEL,
                verbose_name="Team Members",
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["team", "role"], name="audits_team_team_id_b9d824_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["user", "is_active"], name="audits_team_user_id_5368d4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="teammember",
            unique_together={("team", "user")},
        ),
        migrations.AddIndex(
            model_name="team",
            index=models.Index(
                fields=["type", "is_active"], name="audits_team_type_f95dde_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="team",
            index=models.Index(
                fields=["owner", "is_active"], name="audits_team_owner_i_20d0da_idx"
            ),
        ),
    ]
